// Code generated by go-bindata.
// sources:
// schema/sql/schema.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSqlSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd0\xc1\x4b\xc3\x30\x14\x06\xf0\xf3\xf2\x57\x3c\x7a\x6a\x61\x07\xf1\xba\x53\xd5\x38\x82\x5a\xa5\xad\xb0\x21\x12\xb2\xe6\x95\x45\xd7\xa4\xbc\xbc\xca\xf0\xaf\x17\xb5\xd8\xa1\x6c\x60\xae\xbf\x8f\x2f\xbc\xef\xb2\x94\x79\x2d\xa1\xce\x2f\x6e\x25\xa8\x6b\x28\xee\x6b\x90\x2b\x55\xd5\x15\x10\xf6\x21\x3a\x0e\xe4\x30\x42\x2a\x66\xce\xc2\x30\x38\x0b\x0f\xa5\xba\xcb\xcb\x35\xdc\xc8\xf5\x5c\xcc\x1a\x42\xc3\x68\xb5\x61\x60\xd7\x61\x64\xd3\xf5\xfc\x3e\x17\x30\xbe\xa1\xb7\x27\x1d\xbd\xed\x83\xf3\x1c\x81\x71\xcf\x4f\xcf\x93\x44\x36\x3c\x44\x78\x33\xd4\x6c\x0d\xa5\xe7\x67\xd9\x64\x2d\x72\xb3\x3d\xd1\xfa\xe5\x1a\x89\x02\x1d\xcd\xec\x4c\x64\xdd\x84\xae\x73\x7c\x34\xe3\xa2\x6e\x03\xbd\xc2\x26\x84\x1d\x1a\x3f\x81\x26\x6c\x91\xd0\x37\x18\xe1\x25\x06\xbf\x11\xd9\x42\x88\x71\x4d\x55\x5c\xc9\xd5\xaf\x35\x9d\xdd\xeb\xc3\x45\xf5\x74\x78\xf0\x90\x1c\x52\x02\x8f\x95\x2a\x96\xb0\x54\x05\xa4\xc9\x4f\x2e\xc9\x16\xff\xfa\x60\xdc\xef\x6f\x7b\x9a\x7c\xd3\x67\xe1\x47\x00\x00\x00\xff\xff\x30\x3e\xfc\x41\x00\x02\x00\x00")

func schemaSqlSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSqlSchemaSql,
		"schema/sql/schema.sql",
	)
}

func schemaSqlSchemaSql() (*asset, error) {
	bytes, err := schemaSqlSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/sql/schema.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/sql/schema.sql": schemaSqlSchemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"sql": &bintree{nil, map[string]*bintree{
			"schema.sql": &bintree{schemaSqlSchemaSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

